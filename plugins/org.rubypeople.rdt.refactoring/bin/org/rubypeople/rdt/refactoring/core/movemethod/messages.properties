MethodMover_An=An 
MethodMover_ForField=\ for the field 
MethodMover_WillBeGenerated=\ will be generated.
MethodMover_TheVisibilityOfMethod=The visibility of method 
MethodMover_WillBeChangedToPublic=\ will be changed to public.
MethodMover_TheVisibilityOfTheMovingMethod=The visibility of the moving method 
MethodMover_IsChangedFrom=\ is changed from 
MethodMover_To=\ to 
MethodMover_NameWillBeChangedTo=The name of the moving method will be changed to 
MethodMover_DuToNameConflicts=\ due to name conflicts.
MoveMethodRefactoring_Name=Move Method
MoveMethodConditionChecker_NeedsToBeInsideClass=The caret needs to be inside of a class.
MoveMethodConditionChecker_NeedsToBeInsideMethod=The caret needs to be inside of the method you want to move.
MoveMethodConditionChecker_CannotMoveConstructor=The selected method is a constructor and thus cannot be moved.
MoveMethodConditionChecker_NoTarget=There is no target class where you could move to.
MoveMethodConditionChecker_NoFieldOfTargetType=There is no possible field of the type of the target class.
MoveMethodConditionChecker_TheMethod=The method \"
MoveMethodConditionChecker_CanBeCalledFromOutside=\" can be called from outside of the class 
MoveMethodConditionChecker_MightNotGetReplaced=. Since Ruby is dynamically typed, calls from outside the class definition might not get replaced with calls to the class 
MoveMethodConditionChecker_ContainsClassField=" contains the class field "
MoveMethodConditionChecker_MovingMightAffectTheFunctionality=". Moving it might affect the functionality of the class "
