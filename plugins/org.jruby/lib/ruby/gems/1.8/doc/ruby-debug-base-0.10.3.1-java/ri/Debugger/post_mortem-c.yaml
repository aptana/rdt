--- !ruby/object:RI::MethodDescription 
params: () {|| ...}
is_singleton: true
block_params: ""
name: post_mortem
comment: 
- !ruby/struct:SM::Flow::P 
  body: 'Activates the post-mortem mode. There are two ways of using it:'
- !ruby/struct:SM::Flow::H 
  level: 2
  text: Global post-mortem mode
- !ruby/struct:SM::Flow::P 
  body: By calling Debugger.post_mortem method without a block, you install at_exit
    hook that intercepts any unhandled by your script exceptions and enables post-mortem
    mode.
- !ruby/struct:SM::Flow::H 
  level: 2
  text: Local post-mortem mode
- !ruby/struct:SM::Flow::P 
  body: If you know that a particular block of code raises an exception you can enable
    post-mortem mode by wrapping this block with Debugger.post_mortem, e.g.
- !ruby/struct:SM::Flow::VERB 
  body: "  def offender\n     raise 'error'\n  end\n  Debugger.post_mortem do\n   \
    \  ...\n     offender\n     ...\n  end\n"
full_name: Debugger::post_mortem
visibility: public
aliases: []

